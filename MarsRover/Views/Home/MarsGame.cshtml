@model IEnumerable<GameScore>

<div id="score">0</div>
<div class="game-container">
    <canvas id="roverboard" width="640" height="480"></canvas>
    <canvas id="gameMenu" width="640" height="480"></canvas>
</div>
<style>
    .game-container {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    #score {
        text-align: center;
        font-size: 150px;
        font-weight: bold;
    }
</style>
<script>
    // html elements
    var canvas = document.getElementById("gameMenu");
    var context = canvas.getContext("2d");
    var width = canvas.getAttribute("width");
    var height = canvas.getAttribute("height");

    // menu images
    var bgImage = new Image();
    var logoImage = new Image();
    var playImage = new Image();
    var backImage = new Image();
    var settingsImage = new Image();
    var highscoreImage = new Image();
    var marsImage = new Image();

    // high score data
    var scoreObj = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model) as String);

    // options
    var menu = true;

    // declare sources for images
    marsImage.src = "../img/marsimage.png";
    bgImage.src = "../img/backgroundNew.png";
    logoImage.src = "../img/MarsRoverTitle.png";
    playImage.src = "../img/Play.png";
    settingsImage.src = "../img/Settings.png";
    highscoreImage.src = "../img/Highscores.png";
    backImage.src = "../img/back.png";

    // button locations
    var buttonX = [225, 140, 95, 50];
    var buttonY = [125, 180, 230, 350];
    var buttonWidth = [172, 347, 437, 172];
    var buttonHeight = [49, 55, 75, 48];

    // variables for parallax
    var backgroundY = 0;
    var speed = 0.5;

    // mars variables
    var marsX = [0, 0];
    var marsY = [0, 0];
    var marsWidth = 35;
    var marsHeight = 40;
    var marsVisible = false;
    var marsSize = marsWidth;
    var marsRotate = 0;

    // mouse position
    var mouseX;
    var mouseY;

    // draw menu when the images load
    bgImage.onload = function () {
        context.drawImage(bgImage, 0, 0);
    };
    logoImage.onload = function () {
        context.drawImage(logoImage, 100, -10);
    }
    playImage.onload = function () {
        context.drawImage(playImage, buttonX[0], buttonY[0]);
    }
    settingsImage.onload = function () {
        context.drawImage(settingsImage, buttonX[1], buttonY[1]);
    }
    highscoreImage.onload = function () {
        context.drawImage(highscoreImage, buttonX[2], buttonY[2]);
    }

    // fade in menu
    var timerId = setInterval(update, 1000 / frames);

    // update function
    function update() {
        clear();
        backgroundScroll();
        if (menu) {
            drawMenu();
        } else {
            drawHighscores();
        }
    }

    function clear() {
        context.clearRect(0, 0, width, height);
    }

    function backgroundScroll() {
        backgroundY -= speed;
        if (backgroundY === -1 * height) {
            backgroundY = 0;
        }
        if (marsSize === marsWidth) {
            marsRotate = -0.25;
        }
        if (marsSize === 0) {
            marsRotate = 0.25;
        }
        marsSize += marsRotate;
    }

    function drawMenu() {
        context.drawImage(bgImage, 0, backgroundY);
        context.drawImage(logoImage, 90, 20);
        context.drawImage(playImage, buttonX[0], buttonY[0]);
        context.drawImage(settingsImage, buttonX[1], buttonY[1]);
        context.drawImage(highscoreImage, buttonX[2], buttonY[2]);
        if (marsVisible === true) {
            context.drawImage(marsImage, marsX[0] - (marsSize / 2), marsY[0], marsSize, marsHeight);
            context.drawImage(marsImage, marsX[1] - (marsSize / 2), marsY[1], marsSize, marsHeight);
        }
    }

    function drawHighscores() {
        context.drawImage(bgImage, 0, backgroundY);
        // draw menu title
        context.drawImage(logoImage, 90, 20);
        // call get request to return new view with high scores
        // draw back button
        context.drawImage(backImage, buttonX[3], buttonY[3]);
        // draw high scores
        for (var i = 0; i < 5; i++) {
            context.fillStyle = "white";
            context.font = '50px Poppins';
            context.fillText(scoreObj[i]['Username'] + " : " + scoreObj[i]["Score"], 100, 100 + i * 50);
        }
    }

    // add event listener to mouse
    canvas.addEventListener("mousemove", checkPos);

    // check mouse position function
    function checkPos(mouseEvent) {

        if (mouseEvent.pageX || mouseEvent.pageY === 0) {
            mouseX = mouseEvent.pageX - this.offsetLeft;
            mouseY = mouseEvent.pageY - this.offsetTop;
        } else if (mouseEvent.offsetX || mouseEvent.offsetY === 0) {
            mouseX = mouseEvent.offsetX;
            mouseY = mouseEvent.offsetY;
        }

        for (var i = 0; i < buttonX.length; i++) {
            if (mouseX > buttonX[i] && mouseX < buttonX[i] + buttonWidth[i]) {
                if (mouseY > buttonY[i] && mouseY < buttonY[i] + buttonHeight[i]) {
                    marsVisible = true;
                    marsX[0] = buttonX[i] - (marsWidth / 2) - 2;
                    marsY[0] = buttonY[i] + 2;
                    marsX[1] = buttonX[i] + buttonWidth[i] + (marsWidth / 2);
                    marsY[1] = buttonY[i] + 2;
                }
            } else {
                marsVisible = false;
            }
        }
    }

    // fading
    var fadeId = 0;
    canvas.addEventListener("mouseup", checkClick);
    var time = 0.0;
    fadeId = setInterval("fadeOut()", 1000 / frames);
    clearInterval(timerId);

    function checkClick(mouseEvent) {
        for (var i = 0; i < buttonX.length; i++) {
            if (mouseX > buttonX[i] && mouseX < buttonX[i] + buttonWidth[i]) {
                if (mouseY > buttonY[i] && mouseY < buttonY[i] + buttonHeight[i]) {
                    if (i === 0) {
                        resetBoard();
                        main();
                        genFood();
                    } else if (i === 2) {
                        menu = false;
                    }
                }
            }
        }
    }

    function fadeOut() {
        context.fillStyle = "rgba(0,0,0, 0.2)";
        context.fillRect(0, 0, width, height);
        time += 0.1;
        if (time >= 2) {
            clearInterval(fadeId);
            time = 0;
            timerId = setInterval("update()", 1000 / frames);
            canvas.addEventListener("mousemove", checkPos);
            canvas.addEventListener("mouseup", checkClick);
        }
    }



    // end of menu stuff





    //start of snake game
    var boardBorder = "black";
    var boardBackground = "transparent";
    var roverColor = "lightblue";
    var roverBorder = "darkblue";

    var rover = [
        { x: 64, y: 64 }
    ];

    var score = 0;
    // True if changing direction
    var changingDirection = false;
    // Horizontal velocity
    var foodX;
    var foodY;
    var dx = 16;
    // Vertical velocity
    var dy = 0;

    // Get the canvas element
    var roverboard = document.getElementById("roverboard");
    // Return a two dimensional drawing context
    var roverboardCtx = roverboard.getContext("2d");

    var rockImage = new Image();
    rockImage.src = "../img/MarsFood.png";
    var roverRock = new Image();
    roverRock.src = "../img/RoverRock.png";
    var roverN = new Image();
    roverN.src = "../img/GameRoverN.png";
    var roverE = new Image();
    roverE.src = "../img/GameRoverE.png";
    var roverS = new Image();
    roverS.src = "../img/GameRoverS.png";
    var roverW = new Image();
    roverW.src = "../img/GameRoverW.png";


    // INPUTS ==============================================================

    // Let the game listen for keyboard inputs
    document.addEventListener("keydown", changeDirection);

    // to stop the up and down arrows scrolling the page
    window.addEventListener("keydown",
        function (e) {
            if (["ArrowUp", "ArrowDown"].indexOf(e.code) > -1) {
                e.preventDefault();
            }
        },
        false);

    // MAIN ==========================================================================

    // main function called repeatedly to keep the game running
    function main() {
        if (hasGameEnded()) {
            // create a form element with a post method to send to controller
            var form = document.createElement("form");
            form.setAttribute("method", "post");
            // figure this out ==============
            form.setAttribute("action", "/Home/MarsGame");
            // ==============================

            // create input elements and set attributes
            var nameField = document.createElement("input");
            var scoreField = document.createElement("input");

            nameField.setAttribute("type", "hidden");
            scoreField.setAttribute("type", "hidden");

            nameField.setAttribute("name", "username");
            scoreField.setAttribute("name", "score");

            nameField.setAttribute("value", "bobby");
            scoreField.setAttribute("value", score);

            // add the input elements to the form
            form.appendChild(nameField);
            form.appendChild(scoreField);

            // add the form to the document
            document.body.appendChild(form);

            // submit the form
            form.submit();

            return;
        }

        changingDirection = false;
        setTimeout(function () {
            clearBoard();
            drawFood();
            moveRover();
            drawRover();
            // Repeat
            main();
        },
            150);
    }


    // DRAWING =======================================================

    // draw a border around the canvas
    function clearBoard() {
        //  Select the color to fill the drawing
        roverboardCtx.fillStyle = boardBackground;
        //  Select the color for the border of the canvas
        roverboardCtx.strokestyle = boardBorder;
        // Draw a "filled" rectangle to cover the entire canvas
        roverboardCtx.clearRect(0, 0, roverboard.width, roverboard.height);
        // Draw a "border" around the entire canvas
        roverboardCtx.strokeRect(0, 0, roverboard.width, roverboard.height);
        roverboard.style.background = "url('../img/FinalMarsBackground.png')";
    }

    function drawFood() {
        roverboardCtx.drawImage(rockImage, foodX, foodY);
    }

    // Draw the rover on the canvas
    function drawRover() {
        // Draw each part
        var head = rover[0]; // get first element
        var rocksArray = rover.slice(1); // remove the head from the array
        drawRoverHead(head);
        if (rover.length > 1) {
            rocksArray.forEach(drawRock);
        }
    }

    // Draw one rover part
    function drawRoverHead(roverPart) {
        if (dx === 16 && dy === 0) roverboardCtx.drawImage(roverE, roverPart.x, roverPart.y);
        else if (dx === -16 && dy === 0) roverboardCtx.drawImage(roverW, roverPart.x, roverPart.y);
        else if (dx === 0 && dy === 16) roverboardCtx.drawImage(roverN, roverPart.x, roverPart.y);
        else if (dx === 0 && dy === -16) roverboardCtx.drawImage(roverS, roverPart.x, roverPart.y);
    }

    function drawRock(rock) {
        roverboardCtx.drawImage(roverRock, rock.x, rock.y);
    }


    // END DRAWING ====================================================================



    function hasGameEnded() {
        for (let i = 4; i < rover.length; i++) {
            if (rover[i].x === rover[0].x && rover[i].y === rover[0].y) return true;
        }
        var hitLeftWall = rover[0].x < 0;
        var hitRightWall = rover[0].x > roverboard.width - 16;
        var hitTopWall = rover[0].y < 0;
        var hitBottomWall = rover[0].y > roverboard.height - 16;
        return hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;
    }

    function resetBoard() {
        score = 0;
        updateScore();
        changingDirection = false;
        clearBoard();
        dx = 16;
        dy = 0;
        rover = [
            { x: 64, y: 64 }
        ];
    }

    function randomFood(min, max) {
        return Math.round((Math.random() * (max - min) + min) / 16) * 16;
    }

    function genFood() {
        // Generate a random number the food x-coordinate
        foodX = randomFood(0, roverboard.width - 16);
        // Generate a random number for the food y-coordinate
        foodY = randomFood(0, roverboard.height - 16);
        // if the new food location is where the snake currently is, generate a new food location
        rover.forEach(function (part) {
            var hasEaten = part.x === foodX && part.y === foodY;
            if (hasEaten) genFood();
        });
    }

    function changeDirection(event) {
        var leftKey = 37;
        var rightKey = 39;
        var upKey = 38;
        var downKey = 40;

        // Prevent the snake from reversing
        if (changingDirection) return;
        changingDirection = true;
        var keyPressed = event.keyCode;
        var goingUp = dy === -16;
        var goingDown = dy === 16;
        var goingRight = dx === 16;
        var goingLeft = dx === -16;
        if (keyPressed === leftKey && !goingRight) {
            dx = -16;
            dy = 0;
        }
        if (keyPressed === upKey && !goingDown) {
            dx = 0;
            dy = -16;
        }
        if (keyPressed === rightKey && !goingLeft) {
            dx = 16;
            dy = 0;
        }
        if (keyPressed === downKey && !goingUp) {
            dx = 0;
            dy = 16;
        }
    }

    function moveRover() {
        // Create the new rover's head
        var head = { x: rover[0].x + dx, y: rover[0].y + dy };
        // Add the new head to the beginning of snake body
        rover.unshift(head);
        var hasEatenFood = rover[0].x === foodX && rover[0].y === foodY;
        if (hasEatenFood) {
            // Increase score
            score += 1;
            // Display score on screen
            updateScore();
            // Generate new food location
            genFood();
        } else {
            // Remove the last part of rover body
            rover.pop();
        }
    }

    function updateScore() {
        document.getElementById("score").innerHTML = score;
    }
</script>